---
const { post } = Astro.props;

// headline 요소 추출
const body = post.body.split("\r\n");

const isHead = (e) => {
  return e.charAt(1) === " " || e.charAt(2) === " ";
};
const headLine = body.filter((e) => isHead(e) && e.startsWith("#"));
let temp_html = "<ul>";
let isOpenedNestedUl = false;

// TOC 생성 함수
const getTree = (
  arr,
  curIdx,
  isPrevH1,
  isCurH1,
  isNextH1,
  temp_html,
  isOpenedNestedUl
) => {
  // 탈출 조건
  if (arr.length === curIdx) {
    temp_html = temp_html + "</ul>";
    return temp_html;
  }
  const re = /[!?.]/g;
  const curValue = arr[curIdx];
  const curText = curValue.replaceAll("#", "").trimStart();
  const curId = curValue
    .replaceAll("#", "")
    .toLowerCase()
    .trimStart()
    .replaceAll(re, "")
    .replaceAll(" ", "-");
  isPrevH1 =
    arr[curIdx - 1] !== undefined ? arr[curIdx - 1].charAt(1) === " " : null;
  isCurH1 = curValue.charAt(1) === " ";
  isNextH1 =
    arr[curIdx + 1] !== undefined ? arr[curIdx + 1].charAt(1) === " " : null;

  if (isPrevH1 && isPrevH1 !== null && !isCurH1) {
    temp_html = temp_html + `<ul class="toc ul">`;
    isOpenedNestedUl = true;
  }

  temp_html += `<li class="toc li"><a href="#${curId}">${curText}</a></li>`;

  if (isOpenedNestedUl && (isNextH1 || isNextH1 === null)) {
    temp_html = temp_html + "</ul>";
    isOpenedNestedUl = false;
  }
  return getTree(
    arr,
    curIdx + 1,
    isPrevH1,
    isCurH1,
    isNextH1,
    temp_html,
    isOpenedNestedUl
  );
};

const temp_toc = getTree(
  headLine,
  0,
  null,
  true,
  null,
  temp_html,
  isOpenedNestedUl
);
---

<div class="toc container">
  <Fragment class="toc" set:html={temp_toc} />
</div>

<!-- <script src="../../scripts/toc.js"></script> -->
<style>
  .toc.container {
    position: sticky;
    top: 100px;

    ul {
      padding-left: 30px;
    }

    li {
      margin-bottom: 4px;
    }

    ul > li::marker {
      content: "";
    }

    .toc.ul > li > a {
      font-size: 0.9em;
    }

    ul > li.selected > a {
      font-weight: bold;
    }
  }
</style>
